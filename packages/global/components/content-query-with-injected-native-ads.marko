import convertAdToContent from "@parameter1/base-cms-marko-web-native-x/utils/convert-ad-to-node";

$ const injectAds = ({
    adNodes,
    contentNodes,
    place = 'in-place',
    positions
  }) => {
  const positionsReversed = positions.reverse();
  const allNodes = []
  contentNodes.forEach((contentNode, index) => {
    const effectiveIndex = index ? (index * 2) + 1 : index;
    const currentInjectionIndex = positionsReversed[positionsReversed.length - 1];
    console.log(currentInjectionIndex, index, effectiveIndex, effectiveIndex + 1, effectiveIndex + 2, adNodes);
    allNodes[effectiveIndex] = currentInjectionIndex === index && place === 'before' ? adNodes.pop() || null : null;
    allNodes[effectiveIndex + 1] = currentInjectionIndex === index && place === 'in-place' ? adNodes.pop() || contentNode : contentNode;
    allNodes[effectiveIndex + 2] = currentInjectionIndex === index && place === 'after' ? adNodes.pop() || null : null;
    if (currentInjectionIndex === index) {
      positionsReversed.pop();
    }
  });
  console.log(allNodes);
  return allNodes.filter((node) => node);
};

$ const allowedQueryNames = [
  "all-author-content",
  "all-company-content",
  "magazine-scheduled-content",
  "related-published-content",
  "website-optioned-content",
  "website-scheduled-content"
];
<if(input.queryName && allowedQueryNames.includes(input.queryName))>
   <marko-web-query|{ nodes: contentNodes }|
      name=input.queryName
      params=input.queryParams
    >
      $ console.log(contentNodes.length);
      $ const n = input.positions.length || 0;
      <marko-web-native-x-fetch-elements|{ ads }| uri=input.uri id=input.placementId opts={ n }>
        $ const adNodes = ads.filter((ad) => ad.hasCampaign).map((ad) => {
            const convertedAd = convertAdToContent(ad, { sectionName: input.sectionName }) || {};
            const { node, attrs: containerAttrs, linkAttrs } = convertedAd;
            return {
              ...node,
              containerAttrs,
              linkAttrs
            }
          });
        $ const allNodes = injectAds({ adNodes, contentNodes, place: input.place, positions: input.positions });
        $ const data = { nodes: allNodes };
      <if(allNodes)>
        <if(allNodes.length)>
          <${input.renderBody} ...data />
        </if>
        <else>
          <${input.whenEmpty} />
        </else>
      </if>
      </marko-web-native-x-fetch-elements>
    </marko-web-query>
</if>
