import { BEM, warn } from "@base-cms/utils";
import { getAsObject } from "@base-cms/object-path";
import defaultValue from "@base-cms/marko-core/utils/default-value";
import generateId from "@base-cms/marko-web-gam/utils/generate-id";
import buildSlots from "@base-cms/marko-web-gam/utils/build-slots";
import slotStyle from "@base-cms/marko-web-gam/utils/slot-size-style";

$ const { isArray } = Array;
$ const {
  path,
  inc,
  targeting,
  sizeMapping,
  withWrapper,
  collapseBeforeAdFetch,
  requestOnMediaMatch,
} = input;
$ const id = input.id || generateId({ inc });

$ const collapse = defaultValue(input.collapse, true);
$ const oop = defaultValue(input.oop, false);
$ const size = typeof input.size === "string" ? [input.size] : (isArray(input.size) ? input.size : []);
$ const applyStyle = input.applyStyle == null ? false : input.applyStyle;
$ const style = applyStyle ? slotStyle(size) : null;

$ const calls = [];
$ const slots = {
  [id]: {
    path,
    size,
    sizeMapping,
    targeting,
    oop,
    collapse,
    collapseBeforeAdFetch: input.collapseBeforeAdFetch,
  },
};
$ calls.push(...buildSlots(slots));

$ const attrs = {
  ...getAsObject(input.attrs),
  "data-gam-path": path,
  "data-gam-size": JSON.stringify(size),
  "data-gam-size-mapping": sizeMapping ? JSON.stringify(sizeMapping) : undefined,
  "data-gam-targeting": targeting ? JSON.stringify(targeting) : undefined,
  "data-gam-collapse": `${collapse}`,
  ...(collapseBeforeAdFetch && { "data-gam-collapse-before-ad-fetch": "true" }),
  ...(oop && { "data-gam-oop": "true" }),
};

$ const blockName = input.blockName || "ad-container";
$ const classNames = [blockName, ...BEM.applyModifiers(blockName, input.modifiers), input.class];

$ const debugMediaQuery = Boolean(defaultValue(input.debugMediaQuery, false));
$ if (requestOnMediaMatch) calls.push(`
  var hasRequested = false; var debugMediaQuery = ${debugMediaQuery};
  var handler = function(media) {
    if (hasRequested) return;
    if (media.matches) {
      googletag.display('${id}'); hasRequested = true;
      if (debugMediaQuery) console.log('GAM ad request sent based on media query', '${id}', '${requestOnMediaMatch}');
    } else {
      if (debugMediaQuery) console.log('GAM ad request ineligble based on media query', '${id}', '${requestOnMediaMatch}');
    }
  };
  var mql = window.matchMedia('${requestOnMediaMatch}');
  mql.addEventListener('change', function(event) { handler(event); });
  handler(mql);
`);
$ if (!requestOnMediaMatch) calls.push(`googletag.display('${id}');`);

<if(path)>
  <div
    id=(withWrapper ? null : id)
    style=style
    class=classNames
    ...attrs
  >
    <marko-web-gam-ad-wrapper id=id enabled=withWrapper block-name=blockName>
      <if(input.renderBody)>
        <${input.renderBody} block-name=blockName />
      </if>

      $ const script = `googletag.cmd.push(function() { ${calls.join(" ")} });`;
      <script-loader script=script query-param="load-gam" />
    </marko-web-gam-ad-wrapper>
  </div>
</if>
<else>
  $ warn("Unable to render ad unit: no `path` was provided.");
</else>
